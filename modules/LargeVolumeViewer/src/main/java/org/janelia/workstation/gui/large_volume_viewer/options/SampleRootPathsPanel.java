package org.janelia.workstation.gui.large_volume_viewer.options;

import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JPanel;

import org.janelia.workstation.controller.access.TiledMicroscopeDomainMgrFactory;
import org.janelia.workstation.integration.util.FrameworkAccess;
import org.janelia.workstation.common.gui.support.StringMemberListPanel;
import org.janelia.workstation.gui.large_volume_viewer.action.LargeVolumeSampleDiscoveryAction;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

final class SampleRootPathsPanel extends javax.swing.JPanel {

    private static final Logger log = LoggerFactory.getLogger(SampleRootPathsPanel.class);
    
    private final SampleRootPathsOptionsPanelController controller;
    private final StringMemberListPanel pathPanel;

    SampleRootPathsPanel(final SampleRootPathsOptionsPanelController controller) {
        this.controller = controller;
        initComponents();

        JButton launchDiscoveryButton = new JButton("Launch sample discovery");
        launchDiscoveryButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
            	controller.applyChanges();
            	LargeVolumeSampleDiscoveryAction action = new LargeVolumeSampleDiscoveryAction();
            	action.actionPerformed(e);
            }
        });

        JPanel buttonPane = new JPanel();
        buttonPane.setLayout(new BoxLayout(buttonPane, BoxLayout.LINE_AXIS));
        buttonPane.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));
        buttonPane.add(Box.createHorizontalGlue());
        buttonPane.add(launchDiscoveryButton);

        add(buttonPane, BorderLayout.NORTH);
        
        this.pathPanel = new StringMemberListPanel("Paths") {
            @Override
            public void membershipChanged() {
                controller.changed();
            }
        };
        add(pathPanel, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        try {
            List<String> paths = TiledMicroscopeDomainMgrFactory.getDomainMgr().getSamplePaths();
            log.info("Loaded sample paths: {}",paths);
            pathPanel.initItemsInList(paths);
        } 
        catch (Exception e) {
            FrameworkAccess.handleException(e);
        }
    }

    void store() {
        try {
            List<String> paths = pathPanel.getItemsInList();
            log.info("Saving sample paths: {}",paths);
            TiledMicroscopeDomainMgrFactory.getDomainMgr().setSamplePaths(paths);
        } 
        catch (Exception e) {
            FrameworkAccess.handleException(e);
        }
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
