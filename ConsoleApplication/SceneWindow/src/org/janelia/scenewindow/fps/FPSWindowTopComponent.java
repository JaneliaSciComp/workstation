
package org.janelia.scenewindow.fps;

import java.util.Collection;
import java.util.Observable;
import java.util.Observer;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */


@ConvertAsProperties(
        dtd = "-//org.janelia.scenewindow//FPSWindow//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "FPSWindowTopComponent",
        iconBase = "org/janelia/scenewindow/stopwatch1.png", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "properties", openAtStartup = false)
@ActionID(category = "Window", id = "org.janelia.scenewindow.FPSWindowTopComponent")
@ActionReference(path = "Menu/Window/Horta" , position = 250)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_FPSWindowAction",
        preferredID = "FPSWindowTopComponent"
)
@Messages({
    "CTL_FPSWindowAction=Graphics Speed",
    "CTL_FPSWindowTopComponent=Graphics Speed",
    "HINT_FPSWindowTopComponent=This is a FPS window"
})
public final class FPSWindowTopComponent extends TopComponent 
implements LookupListener
{
    private Lookup.Result<FrameTracker> frameTrackerResult = null;
    private Observer frameBeginObserver;
    private Observer frameEndObserver;
    private FrameTracker selectedFrameTracker = null;
    
    public FPSWindowTopComponent() {
        initComponents();
        setName(Bundle.CTL_FPSWindowTopComponent());
        setToolTipText(Bundle.HINT_FPSWindowTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        fpsLabel = new javax.swing.JLabel();
        msPerFrameLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        fPSGraph1 = new org.janelia.scenewindow.fps.FPSGraph();

        fpsLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(fpsLabel, org.openide.util.NbBundle.getMessage(FPSWindowTopComponent.class, "FPSWindowTopComponent.fpsLabel.text")); // NOI18N
        fpsLabel.setMaximumSize(new java.awt.Dimension(10, 14));
        fpsLabel.setMinimumSize(new java.awt.Dimension(10, 14));
        fpsLabel.setPreferredSize(new java.awt.Dimension(10, 14));

        msPerFrameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        org.openide.awt.Mnemonics.setLocalizedText(msPerFrameLabel, org.openide.util.NbBundle.getMessage(FPSWindowTopComponent.class, "FPSWindowTopComponent.msPerFrameLabel.text")); // NOI18N
        msPerFrameLabel.setMaximumSize(new java.awt.Dimension(10, 14));
        msPerFrameLabel.setMinimumSize(new java.awt.Dimension(10, 14));
        msPerFrameLabel.setPreferredSize(new java.awt.Dimension(10, 14));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(FPSWindowTopComponent.class, "FPSWindowTopComponent.jLabel3.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(FPSWindowTopComponent.class, "FPSWindowTopComponent.jLabel4.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fPSGraph1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(msPerFrameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                            .addComponent(fpsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(0, 50, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fpsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(msPerFrameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(fPSGraph1, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.janelia.scenewindow.fps.FPSGraph fPSGraph1;
    private javax.swing.JLabel fpsLabel;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel msPerFrameLabel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() 
    {
        frameTrackerResult = Utilities.actionsGlobalContext().lookupResult(FrameTracker.class);
        frameTrackerResult.addLookupListener(this);
        Collection<? extends FrameTracker> allFrameTrackers = frameTrackerResult.allInstances();
        if (allFrameTrackers.isEmpty()) {
            setFrameTracker(null);
        }
        else {
            setFrameTracker(allFrameTrackers.iterator().next());
        }    
    }

    @Override
    public void componentClosed() 
    {
        frameTrackerResult.removeLookupListener(this);
        deregisterFrameTracker(selectedFrameTracker);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void resultChanged(LookupEvent le) {
        Collection<? extends FrameTracker> allFrameTrackers = frameTrackerResult.allInstances();
        if (allFrameTrackers.isEmpty()) {
            setFrameTracker(null);
            return;
        }
        setFrameTracker(allFrameTrackers.iterator().next());
    }

    private void setFrameTracker(FrameTracker frameTracker) {
        if (selectedFrameTracker == frameTracker)
            return; // no change
        if (frameTracker == null)
            return; // Remember old tracker, even when view window focus is lost
        deregisterFrameTracker(selectedFrameTracker);
        registerFrameTracker(frameTracker);
    }

    private void deregisterFrameTracker(FrameTracker frameTracker) {
        if (frameTracker == null)
            return;
        frameTracker.getFrameBeginObservable().deleteObserver(frameBeginObserver);
        frameTracker.getFrameEndObservable().deleteObserver(frameEndObserver);
    }

    private void registerFrameTracker(FrameTracker frameTracker) {
        selectedFrameTracker = frameTracker;
        if (frameTracker == null)
            return;
        
        if (frameBeginObserver == null) {
            frameBeginObserver = new Observer() 
            {
                private long previousBegin = System.nanoTime();
                
                @Override
                public void update(Observable o, Object arg) 
                {
                    // System.out.println("Frame begin");
                    long newBegin = System.nanoTime();
                    
                    double deltaMs = (newBegin - previousBegin) / 1e6;
                    String msLabelText = String.format("%1$,.1f", deltaMs);
                    msPerFrameLabel.setText(msLabelText);
                    
                    double fps = 1000 / deltaMs;
                    String fpsLabelText = String.format("%1$,.1f", fps);
                    fpsLabel.setText(fpsLabelText);
                    
                    previousBegin = newBegin;
                }
            };
        }
        if (frameEndObserver == null) {
            frameEndObserver = new Observer() {
                @Override
                public void update(Observable o, Object arg) 
                {
                    // TODO
                    // System.out.println("Frame end");
                }
            };
        }
        
        selectedFrameTracker.getFrameBeginObservable().addObserver(frameBeginObserver);
        selectedFrameTracker.getFrameEndObservable().addObserver(frameEndObserver);
    }
    
}
