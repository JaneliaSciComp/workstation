/*
 * Licensed under the Janelia Farm Research Campus Software Copyright 1.1
 * 
 * Copyright (c) 2014, Howard Hughes Medical Institute, All rights reserved.
 * 
 * Redistribution and use in source and binary forms, with or without 
 * modification, are permitted provided that the following conditions are met:
 * 
 *     1. Redistributions of source code must retain the above copyright notice, 
 *        this list of conditions and the following disclaimer.
 *     2. Redistributions in binary form must reproduce the above copyright 
 *        notice, this list of conditions and the following disclaimer in the 
 *        documentation and/or other materials provided with the distribution.
 *     3. Neither the name of the Howard Hughes Medical Institute nor the names 
 *        of its contributors may be used to endorse or promote products derived 
 *        from this software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" 
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, ANY 
 * IMPLIED WARRANTIES OF MERCHANTABILITY, NON-INFRINGEMENT, OR FITNESS FOR A 
 * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR 
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, 
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, 
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
 * REASONABLE ROYALTIES; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY 
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS 
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package org.janelia.horta;

import java.awt.BorderLayout;
import java.util.Collection;
import java.util.Timer;
import java.util.TimerTask;
import org.janelia.console.viewerapi.color_slider.SliderPanel;
import org.janelia.console.viewerapi.controller.ColorModelListener;
import org.janelia.console.viewerapi.model.ImageColorModel;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.janelia.horta//ColorSliders//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ColorSlidersTopComponent",
        iconBase = "org/janelia/horta/ColorSliderIcon16.png",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "output", openAtStartup = false)
@ActionID(category = "Window", id = "org.janelia.horta.ColorSlidersTopComponent")
@ActionReference(path = "Menu/Window/Horta", position = 150 /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ColorSlidersAction",
        preferredID = "ColorSlidersTopComponent"
)
@Messages({
    "CTL_ColorSlidersAction=Color Sliders",
    "CTL_ColorSlidersTopComponent=ColorSliders",
    "HINT_ColorSlidersTopComponent=Controls for adjusting brightness, contrast, color"
})
public final class ColorSlidersTopComponent extends TopComponent 
implements LookupListener
{
    private Lookup.Result<ImageColorModel> colorMapResult = null;
    private ImageColorModel selectedColorMap = null;
    private final SliderPanel sliderPanel = new SliderPanel();

    public ColorSlidersTopComponent() {
        initComponents();
        sliderPanel.setTop(SliderPanel.VIEW.Horta);
        setName(Bundle.CTL_ColorSlidersTopComponent());
        setToolTipText(Bundle.HINT_ColorSlidersTopComponent());
        
        this.setLayout(new BorderLayout());
        this.add(sliderPanel, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        colorMapResult = Utilities.actionsGlobalContext().lookupResult(ImageColorModel.class);
        colorMapResult.addLookupListener(this);
        Collection<? extends ImageColorModel> allColorMaps = colorMapResult.allInstances();
        if (allColorMaps.isEmpty()) {
            setColorMap(null);
        }
        else {
            setColorMap(allColorMaps.iterator().next());
        }
    }

    @Override
    public void componentClosed() {
        colorMapResult.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    private void setColorMap(ImageColorModel colorMap) {
        if (selectedColorMap == colorMap)
            return; // no change
        if (colorMap == null)
            return; // Remember old colorMap, even when view window focus is lost
        deregisterColorMap(selectedColorMap);
        registerColorMap(colorMap);
    }
    
    private void deregisterColorMap(ImageColorModel colorMap) {
    }

    private void registerColorMap(ImageColorModel colorMap) {
        selectedColorMap = colorMap;
        if (colorMap == null)
            return;
        sliderPanel.setImageColorModel(colorMap);
    }
    
    @Override
    public void resultChanged(LookupEvent le) {
        Collection<? extends ImageColorModel> allColorMaps = colorMapResult.allInstances();
        if (allColorMaps.isEmpty()) {
            setColorMap(null);
            return;
        }
        setColorMap(allColorMaps.iterator().next());
    }
    
}
