package org.janelia.it.workstation.gui.top_component;

import java.awt.BorderLayout;
import java.util.Properties;
import org.janelia.it.workstation.gui.framework.console.Browser;

import org.janelia.it.workstation.gui.framework.outline.OntologyOutline;
import org.janelia.it.workstation.gui.framework.session_mgr.SessionMgr;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/**
 * Top component for displaying the ontology tree. 
 */
@ConvertAsProperties(
        dtd = "-//org.janelia.it.workstation.gui.top_component//OntologyViewer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = OntologyViewerTopComponent.PREFERRED_ID,
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "properties", openAtStartup = false, position = 0)
@ActionID(category = "Window", id = "OntologyViewerTopComponent")
@ActionReference(path = "Menu/Window/Legacy", position = 13)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_OntologyViewerAction",
        preferredID = OntologyViewerTopComponent.PREFERRED_ID
)
@Messages({
    "CTL_OntologyViewerAction=Legacy Ontology Editor",
    "CTL_OntologyViewerTopComponent=Legacy Ontology Editor",
    "HINT_OntologyViewerTopComponent=Browse, edit and create ontologies"
})
public final class OntologyViewerTopComponent extends TopComponent {

    private Logger log = LoggerFactory.getLogger( OntologyViewerTopComponent.class );
    
    public static final String PREFERRED_ID = "OntologyViewerTopComponent";
    
    public OntologyViewerTopComponent() {
        initComponents();
        setName(Bundle.CTL_OntologyViewerTopComponent());
        setToolTipText(Bundle.HINT_OntologyViewerTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();

        jPanel1.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    
    @Override
    public void componentOpened() {
        final Browser browser = SessionMgr.getBrowser();
        if (browser == null) {
            throw new IllegalStateException("Failed to obtain browser object for component.");
        }
        final OntologyOutline ontologyOutline = browser.getOntologyOutline();
        if (ontologyOutline == null) {
            throw new IllegalStateException("No ontology outline located.");
        }
        else {
            log.debug("Activating ontology outline");
            ontologyOutline.activate();
            jPanel1.add(ontologyOutline, BorderLayout.CENTER);
        }
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
}
