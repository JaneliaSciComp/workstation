package org.janelia.it.workstation.gui.options;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JCheckBox;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import org.janelia.it.workstation.gui.framework.session_mgr.SessionMgr;
import org.janelia.it.workstation.gui.framework.viewer.ImagesPanel;
import org.janelia.it.workstation.gui.util.GroupedKeyValuePanel;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static org.janelia.it.workstation.gui.options.OptionConstants.*;

final class BrowserPanel extends javax.swing.JPanel {

    private static final Logger log = LoggerFactory.getLogger(BrowserPanel.class);

    private final BrowserOptionsPanelController controller;
    private final GroupedKeyValuePanel mainPanel;
    
    private JCheckBox unloadImagesCheckbox;
    private JCheckBox disableImageDrag;
    private JCheckBox showAnnotationTables;
    private JSlider annotationTableHeight;

//    private ButtonGroup rendererGroup;
//    private Map<ButtonModel, String> buttonToRendererMap;
    
    BrowserPanel(BrowserOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        
        this.mainPanel = new GroupedKeyValuePanel();
        add(mainPanel, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    void load() {

        SessionMgr sessionMgr = SessionMgr.getSessionMgr();

        log.info("Loading browser settings...");
        mainPanel.removeAll();

        mainPanel.addSeparator("Image Browser");

        // Renderer

        // LOCI renderer does not work with JFS because it does not use authorization

//        rendererGroup = new ButtonGroup();
//        buttonToRendererMap = new HashMap<>();
//
//        JPanel pnlRendererOptions = new JPanel();
//
//        pnlRendererOptions.setLayout(new BoxLayout(pnlRendererOptions, BoxLayout.Y_AXIS));
//
//        String selectedRenderer = (String) sessionMgr.getModelProperty(OptionConstants.DISPLAY_RENDERER_2D);
//        for (RendererType2D type : RendererType2D.values()) {
//            JRadioButton rb = new JRadioButton(type.getName());
//            rb.addActionListener(new ActionListener() {
//                public void actionPerformed(ActionEvent evt) {
//                    controller.changed();
//                }
//            });
//            if (selectedRenderer.equals(type.name())) {
//                rb.setSelected(true);
//            }
//            rendererGroup.add(rb);
//            buttonToRendererMap.put(rb.getModel(), type.name());
//            pnlRendererOptions.add(rb);
//        }
//
//        mainPanel.addItem("2D Image Renderer", pnlRendererOptions);

        // Unload Images

        unloadImagesCheckbox = new JCheckBox();
        unloadImagesCheckbox.setText("Unload images which are not visible on the screen");
        unloadImagesCheckbox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                controller.changed();
            }
        });

        if (sessionMgr.getModelProperty(UNLOAD_IMAGES_PROPERTY) == null) {
            sessionMgr.setModelProperty(UNLOAD_IMAGES_PROPERTY, Boolean.FALSE);
        }
        else {
            unloadImagesCheckbox.setSelected((Boolean) sessionMgr.getModelProperty(UNLOAD_IMAGES_PROPERTY));
        }

        mainPanel.addItem(unloadImagesCheckbox);

        // Disable drag/drop
        
        disableImageDrag = new JCheckBox();
        disableImageDrag.setText("Disable drag and drop in the image viewer");
        disableImageDrag.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                controller.changed();
            }
        });

        if (sessionMgr.getModelProperty(DISABLE_IMAGE_DRAG_PROPERTY) == null) {
            sessionMgr.setModelProperty(DISABLE_IMAGE_DRAG_PROPERTY, Boolean.FALSE);
        }
        else {
            disableImageDrag.setSelected((Boolean) sessionMgr.getModelProperty(DISABLE_IMAGE_DRAG_PROPERTY));
        }

        mainPanel.addItem(disableImageDrag);

        // Use Annotation Tables
        
        annotationTableHeight = new JSlider(ImagesPanel.MIN_TABLE_HEIGHT, ImagesPanel.MAX_TABLE_HEIGHT, ImagesPanel.DEFAULT_TABLE_HEIGHT);
        
        showAnnotationTables = new JCheckBox();
        showAnnotationTables.setText("Show annotations in a table instead of a tag cloud");
        showAnnotationTables.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                controller.changed();
            }
        });
        if (sessionMgr.getModelProperty(SHOW_ANNOTATION_TABLES_PROPERTY) == null) {
            sessionMgr.setModelProperty(SHOW_ANNOTATION_TABLES_PROPERTY, Boolean.FALSE);
        }
        else {
            showAnnotationTables.setSelected((Boolean) sessionMgr.getModelProperty(SHOW_ANNOTATION_TABLES_PROPERTY));
        }

        mainPanel.addItem(showAnnotationTables);

        // Annotation table height

        annotationTableHeight.setMaximumSize(new Dimension(300, Integer.MAX_VALUE));
        annotationTableHeight.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                controller.changed();
            }
        });

        if (sessionMgr.getModelProperty(ANNOTATION_TABLES_HEIGHT_PROPERTY) == null) {
            sessionMgr.setModelProperty(ANNOTATION_TABLES_HEIGHT_PROPERTY, ImagesPanel.DEFAULT_TABLE_HEIGHT);
        }
        else {
            annotationTableHeight.setValue((Integer) sessionMgr.getModelProperty(ANNOTATION_TABLES_HEIGHT_PROPERTY));
        }

        mainPanel.addItem("Annotation table height", annotationTableHeight);

    }

    void store() {

        SessionMgr sessionMgr = SessionMgr.getSessionMgr();

//        String newRenderer = buttonToRendererMap.get(rendererGroup.getSelection());
//        if (!newRenderer.equals(sessionMgr.getModelProperty(OptionConstants.DISPLAY_RENDERER_2D))) {
//            log.info("Saving renderer setting: "+newRenderer);
//            sessionMgr.setModelProperty(OptionConstants.DISPLAY_RENDERER_2D, newRenderer);
//        }
        
        if (unloadImagesCheckbox.isSelected() != (Boolean) sessionMgr.getModelProperty(UNLOAD_IMAGES_PROPERTY)) {
            log.info("Saving unload images setting: "+unloadImagesCheckbox.isSelected());
            sessionMgr.setModelProperty(UNLOAD_IMAGES_PROPERTY, unloadImagesCheckbox.isSelected());
        }

        if (disableImageDrag.isSelected() != (Boolean) sessionMgr.getModelProperty(DISABLE_IMAGE_DRAG_PROPERTY)) {
            log.info("Saving disable image drag: "+disableImageDrag.isSelected());
            sessionMgr.setModelProperty(DISABLE_IMAGE_DRAG_PROPERTY, disableImageDrag.isSelected());
        }

        if (showAnnotationTables.isSelected() != (Boolean) sessionMgr.getModelProperty(SHOW_ANNOTATION_TABLES_PROPERTY)) {
            log.info("Saving show annotation tables: "+showAnnotationTables.isSelected());
            sessionMgr.setModelProperty(SHOW_ANNOTATION_TABLES_PROPERTY, showAnnotationTables.isSelected());
        }

        if (annotationTableHeight.getValue() != (Integer) sessionMgr.getModelProperty(ANNOTATION_TABLES_HEIGHT_PROPERTY)) {
            log.info("Saving annotation table height: "+annotationTableHeight.getValue());
            sessionMgr.setModelProperty(ANNOTATION_TABLES_HEIGHT_PROPERTY, annotationTableHeight.getValue());
        }
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
