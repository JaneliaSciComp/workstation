package org.janelia.it.workstation.gui.options;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.plaf.basic.BasicProgressBarUI;
import javax.swing.text.DefaultFormatter;

import org.janelia.it.workstation.gui.util.GroupedKeyValuePanel;
import org.janelia.it.workstation.gui.framework.session_mgr.SessionMgr;
import org.janelia.it.workstation.gui.util.panels.MemorySettingPanel;
import org.janelia.it.workstation.shared.workers.SimpleWorker;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

final class ApplicationPanel extends javax.swing.JPanel {

    private static final Logger log = LoggerFactory.getLogger(ApplicationPanel.class);
    
    private final ApplicationOptionsPanelController controller;

    private final GroupedKeyValuePanel mainPanel;
    private MemorySettingPanel pnlMemorySetting;
    
    private JComboBox lookAndFeelCombobox;

    private JRadioButton fileCacheEnabledRadioButton;
    private JRadioButton fileCacheDisabledRadioButton;
    private JSpinner fileCacheSpinner;
    private JProgressBar fileCacheUsageBar;
    private JButton fileCacheClearButton;
    
    ApplicationPanel(final ApplicationOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        
        this.mainPanel = new GroupedKeyValuePanel();
        add(mainPanel, BorderLayout.CENTER);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    void load() {
        
        log.info("Loading application settings...");
        // TODO: This should just make selections, but some of our legacy 
        // components don't currently support that kind of update, so we just 
        // recreate the entire panel.
        mainPanel.removeAll();

        // L&F

        mainPanel.addSeparator("User Interface");

        UIManager.LookAndFeelInfo[] infos = UIManager.getInstalledLookAndFeels();

        lookAndFeelCombobox = new JComboBox();
        lookAndFeelCombobox.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                controller.changed();
            }
        });

        JPanel lafPanel = new JPanel();
        lafPanel.setLayout(new BoxLayout(lafPanel, BoxLayout.X_AXIS));
        lookAndFeelCombobox.setAlignmentX(Component.LEFT_ALIGNMENT);
        lafPanel.add(lookAndFeelCombobox);
        lafPanel.add(new JLabel(" (requires restart)"));

        DefaultComboBoxModel model = (DefaultComboBoxModel)lookAndFeelCombobox.getModel();
        String lafClassName = (String)SessionMgr.getSessionMgr().getModelProperty(OptionConstants.DISPLAY_LOOK_AND_FEEL);
        for (UIManager.LookAndFeelInfo info : infos) {
            String name = info.getName() + (info.getName().startsWith("Synthetica") ? "" : " (Unsupported)");
            LookAndFeel laf = new LookAndFeel(info.getClassName(), name);
            model.addElement(laf);
            if (lafClassName.equals(laf.getClassName())) {
                model.setSelectedItem(laf);
            }
        }
        mainPanel.addItem("Look and Feel", lafPanel);

        // Memory

        mainPanel.addSeparator("Memory Management");

        pnlMemorySetting = new MemorySettingPanel();
        pnlMemorySetting.setSettingListener(
            new MemorySettingPanel.SettingListener() {
                @Override
                public void settingChanged() {
                    controller.changed();
                }
            }
        );
        mainPanel.addItem("Max Memory (GB)", pnlMemorySetting);

        // Cache

        JPanel fileCachePanel = buildFileCachePanel();
        mainPanel.addItem("Local Disk Cache", fileCachePanel);
        
    }
    
    private class LookAndFeel {
        private final String className;
        private final String displayName;

        public LookAndFeel(String className, String displayName) {
            this.className = className;
            this.displayName = displayName;
        }
        
        public String getClassName() {
            return className;
        }

        public String getDisplayName() {
            return displayName;
        }

        @Override
        public String toString() {
            return displayName;
        }
    }

    private JPanel buildFileCachePanel() {

        JPanel fileCachePanel = new JPanel();

        fileCachePanel.setLayout(new GridBagLayout());
        fileCachePanel.setMaximumSize(new Dimension(600, 200));

        // ---------------------
        fileCacheEnabledRadioButton = new JRadioButton("Enabled");
        fileCacheDisabledRadioButton = new JRadioButton("Disabled");

        JPanel cacheRadioPanel = new JPanel();
        cacheRadioPanel.setLayout(new BoxLayout(cacheRadioPanel, BoxLayout.X_AXIS));

        ButtonGroup group = new ButtonGroup();
        group.add(fileCacheEnabledRadioButton);
        group.add(fileCacheDisabledRadioButton);
        cacheRadioPanel.add(fileCacheEnabledRadioButton);
        cacheRadioPanel.add(Box.createHorizontalStrut(10));
        cacheRadioPanel.add(fileCacheDisabledRadioButton);
        cacheRadioPanel.add(Box.createHorizontalStrut(10));

        fileCacheEnabledRadioButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                controller.changed();
            }
        });
        
        GridBagConstraints c = new GridBagConstraints();
        c.fill = GridBagConstraints.NONE;
        c.anchor = GridBagConstraints.WEST;
        c.weightx = 0.5;
        c.weighty = 0.5;
        c.gridx = 0;
        c.gridy = 0;

        fileCachePanel.add(new JLabel("Caching:"), c);

        c.gridx = 1;
        fileCachePanel.add(cacheRadioPanel, c);

        c.gridx = 0;
        c.gridy = 1;
        fileCachePanel.add(new JLabel("Capacity (GB):"), c);

        // ---------------------
        fileCacheSpinner = new JSpinner(
            new SpinnerNumberModel(SessionMgr.MIN_FILE_CACHE_GIGABYTE_CAPACITY,
                    SessionMgr.MIN_FILE_CACHE_GIGABYTE_CAPACITY,
                    SessionMgr.MAX_FILE_CACHE_GIGABYTE_CAPACITY,
                    1));
        fileCacheSpinner.setMaximumSize(new Dimension(200, 100));
        fileCacheSpinner.addChangeListener(new ChangeListener() {
            private Object lastValue;
            @Override
            public void stateChanged(ChangeEvent evt) {
                if (lastValue != null && !fileCacheSpinner.getValue().equals(lastValue)) {
                    controller.changed();
                }
                lastValue = fileCacheSpinner.getValue();
            }
        });

        // configure spinner to dis-allow invalid edits
        JSpinner.NumberEditor editor = (JSpinner.NumberEditor) fileCacheSpinner.getEditor();
        JFormattedTextField ftf = editor.getTextField();
        JFormattedTextField.AbstractFormatter formatter = ftf.getFormatter();
        DefaultFormatter df = (DefaultFormatter) formatter;
        df.setAllowsInvalid(false);

        c.gridx = 1;
        fileCachePanel.add(fileCacheSpinner, c);

        // ---------------------
        fileCacheUsageBar = new JProgressBar(0, 100);
        fileCacheUsageBar.setUI(new NonAnimatedProgressBarUI());
        fileCacheUsageBar.setBorder(BorderFactory.createLineBorder(fileCacheUsageBar.getForeground()));
        fileCacheUsageBar.setForeground(Color.GRAY);
        fileCacheUsageBar.setBackground(Color.DARK_GRAY);
        fileCacheUsageBar.setStringPainted(true);

        c.gridx = 0;
        c.gridy = 2;
        fileCachePanel.add(new JLabel("Usage:"), c);

        c.gridx = 1;
        c.fill = GridBagConstraints.HORIZONTAL;
        fileCachePanel.add(fileCacheUsageBar, c);

        // ---------------------
        fileCacheClearButton = new JButton("Clear Cache");
        fileCacheClearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                SessionMgr.getSessionMgr().clearFileCache();
                updateFileCacheComponents(false);
            }
        });

        c.fill = GridBagConstraints.NONE;
        c.anchor = GridBagConstraints.EAST;
        c.gridx = 2;
        fileCachePanel.add(fileCacheClearButton, c);

        updateFileCacheComponents(false);
        
        return fileCachePanel;
    }
    
    private void updateFileCacheComponents(final boolean waitForReload) {

        final SessionMgr sessionMgr = SessionMgr.getSessionMgr();
        final int capacity = sessionMgr.getFileCacheGigabyteCapacity();

        fileCacheSpinner.setValue(capacity);

        if (sessionMgr.isFileCacheAvailable()) {

            fileCacheEnabledRadioButton.setSelected(true);
            fileCacheSpinner.setEnabled(true);

            SimpleWorker worker = new SimpleWorker() {
                
                double percentage;
                
                @Override
                protected void doStuff() throws Exception {
                    if (waitForReload) {
                        try {
                            // HACK! - give the cache a chance to reload before refreshing this view
                            Thread.sleep(500);
                        } catch (InterruptedException e) {
                            log.warn("ignoring exception", e);
                        }
                    }
                    double usage = sessionMgr.getFileCacheGigabyteUsage();
                    this.percentage = (usage / capacity) * 100.0;
                }
                
                @Override
                protected void hadSuccess() {
                    fileCacheUsageBar.setValue((int) percentage);
                    fileCacheUsageBar.setVisible(true);
                    fileCacheClearButton.setEnabled(true);
                }
                
                @Override
                protected void hadError(Throwable error) {
                    SessionMgr.getSessionMgr().handleException(error);
                }
            };
            worker.execute();
            
        } 
        else {
            fileCacheDisabledRadioButton.setSelected(true);
            fileCacheSpinner.setEnabled(false);
            fileCacheUsageBar.setVisible(false);
            fileCacheClearButton.setEnabled(false);
        }
    }

    void store() {
        
        log.info("Saving application settings...");
        
        // Memory
        
        if (pnlMemorySetting.isChanged()) {
            pnlMemorySetting.saveSettings();
        }
        
        // L&F
        
        try {
            LookAndFeel lookAndFeel = (LookAndFeel)lookAndFeelCombobox.getSelectedItem();
            String newLaf = lookAndFeel.getClassName();
            if (!newLaf.equals(SessionMgr.getSessionMgr().getModelProperty(OptionConstants.DISPLAY_LOOK_AND_FEEL))) {
                log.info("Saving L&F setting: "+newLaf);
                SessionMgr.getSessionMgr().setModelProperty(OptionConstants.DISPLAY_LOOK_AND_FEEL, newLaf);
            }
        } catch (HeadlessException ex) {
            SessionMgr.getSessionMgr().handleException(ex);
        }
        
        // Cache
        
        Boolean cacheDisabled = fileCacheDisabledRadioButton.isSelected();
        Integer cacheCapacity = (Integer) fileCacheSpinner.getValue();
        
        final SessionMgr sessionMgr = SessionMgr.getSessionMgr();

        final boolean cacheDisabledChanged =
                ! cacheDisabled.equals(sessionMgr.getModelProperty(OptionConstants.FILE_CACHE_DISABLED_PROPERTY));
        if (cacheDisabledChanged) {
            log.info("Saving file cache disabled setting: "+cacheDisabled);
            sessionMgr.setFileCacheDisabled(cacheDisabled);
        }
        
        final boolean cacheCapacityChanged =
                ! cacheCapacity.equals(sessionMgr.getFileCacheGigabyteCapacity());
        if (cacheCapacityChanged) {
            log.info("Saving cache capacity setting: "+cacheCapacity);
            sessionMgr.setFileCacheGigabyteCapacity(cacheCapacity);
        }
        
        if (cacheDisabledChanged || cacheCapacityChanged) {
            updateFileCacheComponents(true);
        }
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    /**
     * Overrides the default animated progress bar L&F.
     */
    private class NonAnimatedProgressBarUI extends BasicProgressBarUI {

        @Override
        protected Color getSelectionForeground() {
            return getForeground();
        }
        @Override
        protected Color getSelectionBackground() {
            return getForeground();
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
