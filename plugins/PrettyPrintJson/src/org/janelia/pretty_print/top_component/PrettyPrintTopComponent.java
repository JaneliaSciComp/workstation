/*
 * Copyright Howard Hughes Medical Institute, 2016
 */
package org.janelia.pretty_print.top_component;

import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import java.util.Set;
import java.util.LinkedHashSet;
import javax.swing.JScrollPane;
import org.janelia.pretty_print.convertor.PrettyPrinter;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//org.janelia.pretty_print.top_component//PrettyPrint//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "PrettyPrintTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE", 
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = false)
@ActionID(category = "Window", id = "org.janelia.pretty_print.top_component.PrettyPrintTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_PrettyPrintAction",
        preferredID = "PrettyPrintTopComponent"
)
@Messages({
    "CTL_PrettyPrintAction=PrettyPrint",
    "CTL_PrettyPrintTopComponent=Pretty Print JSON",
    "HINT_PrettyPrintTopComponent=Make your single-line JSON text more readable"
})
public final class PrettyPrintTopComponent extends TopComponent {
    private JTextArea input;
    private JTextArea output;
    private JButton convert;
	
	// Coding to the netbeans 7.4 default 1.6 standard.
	private Set<String> history = new LinkedHashSet<String>();

    public PrettyPrintTopComponent() {
        initComponents();
        setName(Bundle.CTL_PrettyPrintTopComponent());
        setToolTipText(Bundle.HINT_PrettyPrintTopComponent());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        mainPanel.setLayout(new java.awt.BorderLayout());
        add(mainPanel, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel mainPanel;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        initMyComponents();
    }

    @Override
    public void componentClosed() {
        // add custom code on component closing
        input = null;
        output = null;
		convert = null;
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }
    
    private void initMyComponents() {
        System.out.println("Component opened.");
        // add custom code on component opening
        input = new JTextArea();
		JScrollPane inputScrollPane = new JScrollPane(input, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
        output = new JTextArea();
		output.setEditable(false);
		JScrollPane outputScrollPane = new JScrollPane(output, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        JPanel ioPanel = new JPanel();
        ioPanel.setLayout(new GridLayout(2, 1, 0, 3));
        ioPanel.add(inputScrollPane);
        ioPanel.add(outputScrollPane);
		JPanel buttonPanel = new JPanel();
		buttonPanel.setLayout(new BorderLayout());
        convert = new JButton("Pretty Print");
		JButton historyButton = new JButton("History");
		historyButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				System.out.println("HISTORY FOR THIS SESSION:");
				for (String historyLesson: history) {
					System.out.println(historyLesson);
				}
			}
			
		});
		buttonPanel.add(convert, BorderLayout.WEST);
		buttonPanel.add(historyButton, BorderLayout.EAST);
        convert.addActionListener(new ActionListener(){

            @Override
            public void actionPerformed(ActionEvent e) {
                String inputStr = input.getText();
                if (inputStr == null  ||  inputStr.trim().length() == 0) {
                    JOptionPane.showMessageDialog(mainPanel, "No Input", "Nothing to Convert", JOptionPane.ERROR_MESSAGE, null);
                }
                else {
                    PrettyPrinter pr = new PrettyPrinter();
                    String outputStr = pr.convert(inputStr);
                    output.setText(outputStr);
					history.add(inputStr);
                }
            }
            
        });
        mainPanel.add(ioPanel, BorderLayout.CENTER);
		mainPanel.add(buttonPanel, BorderLayout.SOUTH);
    }
}
