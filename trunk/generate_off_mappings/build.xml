<?xml version="1.0" encoding="UTF-8" ?>

<!--

	PURPOSE:
		Ant build-file to use Hibernate mapping files to generate .java model files, as well as
		DDL SQL.  It can also create the actual schema/database if properties defined herein are
		specifically overridden to do so.  Carrying this out acts as a test of correctness/cohesiveness
		of the mapping files, and can bootstrap code authoring.

	CAUTIONS:
		Overriding the "export.flag" variable in the user.home properties file (see below) can cause
		a live database/schema generation to be carried out.  This generation will be driven by
		whatever settings are in the hibernate configuration files.  But this must be done with great
		care, as it will wipe out the original data from that database.

	CONFIGURATIONS:
		See ${user.home}/generate_off_mappings.properties, conf/hibernate.properties, conf/hibernate.cfg.xml.

	AUTHOR:
		Les Foster, 8/9/2006

	COPYRIGHT:
		J. Craig Venter Institute, 2006
 -->
<project name="generate off mappings"
         default="generate">

    <!--  Override properties established below.  Establish this BEFORE internal defaults.  -->
    <property file="${user.home}/generate_off_mappings.properties" />


    <!-- Establish props to use in steps below. -->

    <!-- Here, setup absolute locations. Override these from separate properties file.  -->
    <property name="project_name" value="camera" />
    <property name="base" value="../../Camera" />
    <property name="bin.model" value="${base}/model/classes" />
    <property name="shared" value="${base}/shared/conf" />
    <property name="generate_off_mappings.dir" value="." />


    <!-- Here, setup relative locations. -->
    <property name="mappings.dir" value="${base}/model/conf/hibernate_mappings" />
    <property name="local.mappings.dir" value="${generate_off_mappings.dir}/conf/hibernate_mappings" />
    <property name="src.out.dir" value="${generate_off_mappings.dir}/autogenerated_src" />
    <property name="ddl.out.dir" value="${generate_off_mappings.dir}/autogenerated_ddl" />
    <property name="lib.dir" value="${generate_off_mappings.dir}/lib" />
    <property name="common.lib.dir" value="../common" />
    <property name="conf.dir" value="${generate_off_mappings.dir}/conf" />

    <!-- Choices to be overridden by user, as needed. -->
    <property name="export.flag" value="false" />   <!--  'Export' makes a real database and schema, and drops old one. -->

    <!-- Establishing a classpath, to pull in access to relevant files. -->
    <path id="classpath">
        <fileset dir="${mappings.dir}" includes="**/*.hbm.xml"/>
        <fileset dir="${lib.dir}" includes="**/*.jar"/>
        <fileset dir="${common.lib.dir}" includes="**/*.jar"/>
    </path>

    <!-- Target definitions. -->
    <target name="clean">
	<delete dir="${ddl.out.dir}" />
	<delete dir="${src.out.dir}" />

	<mkdir dir="${ddl.out.dir}" />
	<mkdir dir="${src.out.dir}" />
    </target>

    <taskdef name="hibernatetool"
        classname="org.hibernate.tool.ant.HibernateToolTask"
        classpathref="classpath"/>

    <target name="makejava">
	<hibernatetool destdir="${src.out.dir}">
	    <configuration configurationfile="${conf.dir}/hibernate.cfg.xml">
		<fileset dir="${mappings.dir}">
		    <include name="**/*.hbm.xml"/>
		</fileset>
	    </configuration>
	    <hbm2java />
	</hibernatetool>
    </target>

    <target name="makeschema">
	<hibernatetool destdir="${ddl.out.dir}">
        <classpath>
            <fileset dir="${common.lib.dir}" includes="**/*.jar" />
            <pathelement path="${bin.model}" />
            <pathelement path="${shared}" />
        </classpath>
        <configuration configurationfile="${conf.dir}/hibernate.cfg.xml">
        <fileset dir="${local.mappings.dir}">
		    <include name="make-schema.hbm.xml"/>
        </fileset>
	    </configuration>
	    <hbm2ddl export="${export.flag}" outputfilename="sql-schema.ddl"/>
	</hibernatetool>
    </target>

    <target name="makeddl">
	<hibernatetool destdir="${ddl.out.dir}">
        <classpath>
            <fileset dir="${common.lib.dir}" includes="**/*.jar" />
            <pathelement path="${bin.model}" />
            <pathelement path="${shared}" />
        </classpath>
	    <configuration configurationfile="${conf.dir}/hibernate.cfg.xml">
		<fileset dir="${mappings.dir}">
		    <include name="**/*.hbm.xml"/>
		</fileset>
	    </configuration>
	    <hbm2ddl export="${export.flag}" outputfilename="sql.ddl" />
        <!--
	    export="false"
            -->
	</hibernatetool>
    </target>

    <target name="generate" depends="clean,makejava,makeschema,makeddl">
        <echo message="Have completed the code generation" />
    </target>

</project>
