apply plugin: 'groovy'

// set general info and version
sourceCompatibility = 1.7

// import some ant dependencies in case we need them
ant.importBuild ('buildprocess/build-module.xml') { antTargetName ->
    'a-' + antTargetName
}

// declaring properties based off old ant build file
Properties props = new Properties()
props.load(new FileInputStream("buildprocess/config/${ant.properties['user.name']}.properties"))
def localname = "compute"
def condescDir = "conf/container_descriptor"

// dependency repo
repositories {
    mavenCentral()
    maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
}

configurations {
    ngWarLib
}

sourceSets {
    jwmodel {
        java {
            srcDir 'model/src/'
        }
    }
    jwshared {
        java {
            srcDir 'shared/src/'
        }
    }
    main {
        java {
            srcDir 'compute/src'
        }
    }
    test {
        groovy {
            srcDir 'compute/src/test'
        }
    }
}

test {
    testLogging {
        showStandardStreams = true
    }
}

def commonLibs = fileTree(dir: 'common').matching {
	include 'Apache-Commons/**/*.jar'
	include 'Solrj/**/*.jar'
	include 'ehcache/**/*.jar'
	include 'MongoDB/**/*.jar'
	include 'jama-1.0.1/**/*.jar'
	include 'Guava/**/*.jar'
	include 'Scality/**/*.jar'
	include 'Reflections/**/*.jar'
	include 'snakeyaml-1.11/**/*.jar'
	include 'commons-vfs/**/*.jar'
	include 'commons-net/**/*.jar'
	include 'JodaTime/**/*.jar'
	include 'GWT/gwt-servlet.jar'
	include 'Spring/jxl.jar'
	include 'Hibernate-3.2/*.jar'
}
def sharedLibs = fileTree(dir: 'shared/lib').matching {
    include '**/*.jar'
}
def computeLibs = fileTree(dir: 'compute/lib').matching {
    include '**/*.jar'
}


task computeJar(dependsOn:classes, type: Jar) {
    from sourceSets.main.output
    from fileTree (dir: 'compute/conf/resource').matching {
         include '*.process'
    }		
    
    baseName = "compute"
}

task drmaaJar(dependsOn:classes, type: Jar) {
    from fileTree(dir: 'build/classes/main').matching { 
        include 'org/janelia/it/jacs/compute/drmaa/*.class'
        include 'org/janelia/it/jacs/compute/service/common/grid/submit/GridProcessResult.class'
        include 'org/janelia/it/jacs/compute/service/common/grid/submit/sge/RemoteJobStatusLogger.class'
        include 'org/janelia/it/jacs/compute/api/JobControlBeanRemote.class'
    } 
    from fileTree(dir: 'build/classes/jwmodel').matching {  
        include 'org/janelia/it/jacs/model/**/*.class'
    }
    from fileTree(dir: 'compute/conf').matching {
        include 'drmaa/**' 
    }
    from zipTree('common/Spring/log4j-1.2.14.jar').matching {
        exclude 'META-INF/**'
        exclude 'meta-inf/**'
    }
    from zipTree('common/Spring/commons-logging.jar').matching {
        exclude 'META-INF/**'
        exclude 'meta-inf/**'
    }
    from zipTree('common/Spring/spring.jar').matching {
        exclude 'META-INF/**'
        exclude 'meta-inf/**'
    }
    from zipTree('common/JBoss-Server-4.2.3.GA/jbossall-client.jar').matching {
        exclude 'META-INF/**'
        exclude 'meta-inf/**'
    }
    from zipTree('common/JBoss-Server-4.2.3.GA/concurrent.jar').matching {
        exclude 'META-INF/**'
        exclude 'meta-inf/**'
    }
    from zipTree('compute/lib/drmaa.jar').matching {
        include '**/*.properties'
        include 'com/**'
        include 'org/**'
    }
    baseName = 'drmaa'
}

task computeWar(dependsOn:classes, type: War) {
    webInf {
        from fileTree(dir: 'build/classes/main').matching {  
           into 'classes'
           include 'org/janelia/it/jacs/compute/web/**/*.class'
        }
    }  
    from file('shared/conf/jacs.properties')
    from fileTree(dir: 'compute/jsp').matching {
        into '/'
        include 'index.jsp'
        include 'css/*' 
        include 'images/*' 
        include 'includes/*'
        include 'js/*'
        include '*.jsp'
        include '*.css'
    }
    webInf { from 'compute/conf/container_descriptor/jboss-web.xml' }
    webXml = file('compute/WEB-INF/web.xml')
    baseName = 'compute'
}

task computeNGWar(dependsOn:classes, type: War) {
    classpath configurations.ngWarLib
    webInf {
        from fileTree(dir: 'build/classes/main').matching {  
           into 'classes'
           include 'org/janelia/it/jacs/compute/wsrest/**'
           include 'org/janelia/it/jacs/compute/access/**/*'
           include 'org/janelia/it/jacs/compute/util/**/*'
        }

        from fileTree(dir: 'build/classes/jwmodel').matching {  
           into 'classes'
        }

        from fileTree(dir: 'build/classes/jwshared').matching {  
           into 'classes'
        }

        from fileTree('shared/conf').matching {
           into 'classes'
           include 'jacs.properties'
        }
        from fileTree ('compute/conf').matching {
            into 'classes'
            include 'c3p0-nosql.json'
        }
    }  

    from fileTree(dir: 'compute/jsp').matching {
        into '/'
        include 'index.jsp' 
    }
    webXml = file('compute/WEB-INF/secure-web-rest-ws.xml')
    archiveName = 'compute.war'
    version = null
}

task computeEar(dependsOn:['computeWar','computeJar','drmaaJar'], type: Ear) {
    from computeJar.archivePath
    from drmaaJar.archivePath
    from computeWar.archivePath
    from file('compute/conf/ehcache2-jacs.xml')
    from file('shared/conf/jacs.properties')
    into ('lib') {
        from commonLibs.files
        from sharedLibs.files
        from computeLibs.files
    } 
    into ('META-INF') {
        from file('compute/conf/container_descriptor/jboss-app.xml')
        from file('compute/conf/container_descriptor/application.xml')
    }
    baseName = 'compute'
}

dependencies {
    jwmodelCompile fileTree(dir: "shared/lib", include: '**/*.jar')
    jwmodelCompile fileTree(dir: "common", include: '**/*.jar')
    jwmodelCompile group: 'org.jongo', name: 'jongo', version: '1.2'
    jwsharedCompile fileTree(dir: "shared/lib", include: '**/*.jar')
    jwsharedCompile fileTree(dir: "common", include: '**/*.jar')
    jwsharedCompile fileTree(dir: "shared/lib", include: '**/*.jar')
    jwsharedCompile sourceSets.jwmodel.output
    compile fileTree(dir: "compute/lib", include: '**/*.jar')
    compile fileTree(dir: "shared/lib", include: '**/*.jar')
    compile fileTree(dir: "common", include: '**/*.jar')
    compile sourceSets.jwshared.output + sourceSets.jwmodel.output
    ngWarLib group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet-core', version: '2.19'
    ngWarLib group: 'org.glassfish.jersey.connectors', name: 'jersey-apache-connector', version: '2.19'
    ngWarLib group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.2.2'
    ngWarLib group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: '2.22.1'
    ngWarLib group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.1'
    ngWarLib group: 'com.google.guava', name: 'guava', version: '11.0.2'
    ngWarLib group: 'org.jongo', name: 'jongo', version: '1.2'
    ngWarLib group: 'org.mongodb', name: 'mongo-java-driver', version: '3.0.2'
    ngWarLib group: 'org.hibernate', name: 'hibernate-core', version: '3.3.2.GA'
    ngWarLib group: 'org.reflections', name: 'reflections', version: '0.9.8'
    ngWarLib group: 'com.google.gwt', name: 'gwt-user', version: '2.7.0'

    compile 'org.codehaus.groovy:groovy:1.8.6'
    testCompile 'org.spockframework:spock-core:0.7-groovy-1.8'
    testCompile 'cglib:cglib-nodep:2.2'
    testCompile 'org.objenesis:objenesis:1.2'
    testCompile sourceSets.main.output
}

artifacts {
	archives computeJar
	archives drmaaJar
	archives computeEar
	archives computeNGWar
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'build/jars'
       }
    }
}